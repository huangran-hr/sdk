buildscript {
	repositories {
		mavenLocal()
		maven {
			url "https://nexus.mvmyun.com/repository/maven-public/"
		}
	}
	dependencies {
		//classpath "org.netbeans.modules:org-netbeans-libs-jsch-agentproxy:RELEASE124"
	}
}

plugins {
	id 'org.springframework.boot' version '2.6.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'java-library'
	id 'groovy'
	id 'maven-publish'
	id 'signing'
	id 'eclipse'
}

ext {
	set('springCloudVersion', "2021.0.1")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

group = 'com.sjlh.kunlun.member'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenLocal()
	maven {
		url "https://nexus.mvmyun.com/repository/maven-public/"
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
	compileOnly 'com.sjlh.hotel:rpc-spring:0.0.5-SNAPSHOT'
	compileOnly 'org.springframework.boot:spring-boot-starter'
	compileOnly 'org.springframework.boot:spring-boot-starter-data-redis'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

test {
	testLogging {
		exceptionFormat = 'full'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
			if (result.testCount == 0 && !skipTests) {
				//throw new IllegalStateException("No tests were found. Failing the build")
			}
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			groupId "${project.group}"
			artifactId "${project.name}"
			version "${project.version}"
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
		}
	}
	repositories {
		maven {
			def releasesRepoUrl = "https://nexus.mvmyun.com/repository/maven-releases/"
			def snapshotsRepoUrl = "https://nexus.mvmyun.com/repository/maven-snapshots/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username = "admin"
				password = 'admin123'
			}
		}
	}
}

java {
	withSourcesJar()
}
